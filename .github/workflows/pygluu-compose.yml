name: pygluu compose
# This builds, packages and tests pyglu-compose
on:
  push:
    paths:
      - pygluu-compose/pygluu/compose/__init__.py
jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.7]

    steps:
    - name: Checkout code
      uses: actions/checkout@master
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python3 -m pip install --upgrade pip
        sudo apt-get update
        sudo apt-get install ruby

    - name: Lint with flake8
      run: |
        pip3 install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Checkout code
      uses: actions/checkout@master

    - name: Build Zipapp
      run: |
        sudo apt-get update
        sudo apt-get install build-essential
        pip3 install shiv
        mkdir /home/runner/work/test
        cp -r ./pygluu-compose/* /home/runner/work/test/
        cd /home/runner/work/test/
        make zipapp

    - name: Get version
      id: get_version
      run: |
        cd ./pygluu-compose/pygluu/compose
        echo "::set-output name=version::$(python3 -c 'import __init__ ; print(__init__.__version__)')"
        echo "::set-output name=pversion::$(python3 -c 'import __init__ ; print(__init__.__previous_version__)')"

    - name: Test 1 settings(LDAP)
      id: test1_settings
      run: |
        cd /home/runner/work/test/
        ip=$(ifconfig eth0 | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1')
        echo -e "DOMAIN='demoexample.gluu.org'" > settings.py
        echo -e "ADMIN_PW='Test1234%'" >> settings.py
        echo -e "LDAP_PW='Test1234%'" >> settings.py
        echo -e "EMAIL='support@gluu.org'" >> settings.py
        echo -e "ORG_NAME='Gluu'" >> settings.py
        echo -e "COUNTRY_CODE='US'" >> settings.py
        echo -e "STATE='TX'" >> settings.py
        echo -e "CITY='Austin'" >> settings.py
        echo -e "SVC_LDAP='True'" >> settings.py
        echo -e "SVC_OXAUTH='True'" >> settings.py
        echo -e "SVC_OXTRUST='True'" >> settings.py
        echo -e "SVC_OXPASSPORT='True'" >> settings.py
        echo -e "SVC_OXSHIBBOLETH='True'" >> settings.py
        echo -e "SVC_OXD_SERVER='False'" >> settings.py
        echo -e "SVC_RADIUS='False'" >> settings.py
        echo -e "SVC_REDIS='False'" >> settings.py
        echo -e "SVC_VAULT_AUTOUNSEAL='False'" >> settings.py
        echo -e "SVC_CASA='False'" >> settings.py
        echo -e "PERSISTENCE_TYPE='ldap'" >> settings.py
        echo -e "PERSISTENCE_LDAP_MAPPING='default'" >> settings.py
        echo -e "COUCHBASE_USER='admin'" >> settings.py
        echo -e "CCOUCHBASE_URL='localhost'" >> settings.py
        echo -e "OXTRUST_API_ENABLED='False'" >> settings.py
        echo -e "PASSPORT_ENABLED='True'" >> settings.py
        echo -e "CASA_ENABLED='False'" >> settings.py
        echo -e "RADIUS_ENABLED='False'" >> settings.py
        echo -e "SAML_ENABLED='True'" >> settings.py
        echo -e "SCIM_ENABLED='False'" >> settings.py
        echo -e "SCIM_TEST_MODE='False'" >> settings.py
        echo -e "ENABLE_OVERRIDE='True'" >> settings.py
        echo -e "PERSISTENCE_SKIP_EXISTING='True'" >> settings.py
        echo -e "HOST_IP=""'$ip'" >> settings.py
        cat settings.py

    - name: Test Pygluu Compose
      id: test_compose
      run: |
          cd /home/runner/work/test/
          ./pygluu-compose.pyz init
          ./pygluu-compose.pyz up

    - name: Install Changelog autogenerator
      run: |
        cd /home/runner/work/test/
        sudo gem install github_changelog_generator
        github_changelog_generator --user GluuFederation --project community-edition-containers --date-format "%m/%d/%Y" --header-label "# Release Notes" --output release_notes.md --token ${{ secrets.token  }} --since-tag v${{ steps.get_version.outputs.pversion  }}
        sed -i '$ d' release_notes.md
        github_changelog_generator --user GluuFederation --project community-edition-containers --date-format "%m/%d/%Y" --token ${{ secrets.token }}
        sed -i '$ d' CHANGELOG.md

    - name: Read CHANGELOG
      id: changelog
      run: |
        release_notes=$(cat /home/runner/work/test/release_notes.md)
        release_notes="${release_notes//'%'/'%25'}"
        release_notes="${release_notes//$'\n'/'%0A'}"
        release_notes="${release_notes//$'\r'/'%0D'}"
        echo "::set-output name=body::$release_notes"
        cp /home/runner/work/test/CHANGELOG.md .

    - name: Create Release
      id: create_release
      uses: actions/create-release@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: v${{ steps.get_version.outputs.version }}
        release_name: v${{ steps.get_version.outputs.version }}
        body: |
          ${{ steps.changelog.outputs.body }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: /home/runner/work/test/pygluu-compose.pyz
        asset_name: pygluu-compose.pyz
        asset_content_type: application/pyz

    #- name: Push CHANGELOG.md
    #  uses: mikeal/publish-to-github-action@master
    #  env:
    #    GITHUB_TOKEN: ${{ secrets.token }}
